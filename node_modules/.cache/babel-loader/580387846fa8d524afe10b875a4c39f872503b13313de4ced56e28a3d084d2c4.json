{"ast":null,"code":"import { supabase } from './supabase';\n\n// Lead service functions that work with Supabase and RLS\nexport const leadsService = {\n  // Fetch leads for the current user (RLS will filter by brand_id)\n  async fetchLeads() {\n    const {\n      data,\n      error\n    } = await supabase.from('leads').select('*').order('created_at', {\n      ascending: false\n    });\n    if (error) {\n      throw new Error(`Failed to fetch leads: ${error.message}`);\n    }\n    return data || [];\n  },\n  // Insert a new lead with brand_id set to current user's ID\n  async insertLead(leadData) {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      throw new Error('User not authenticated');\n    }\n    const leadWithBrand = {\n      ...leadData,\n      brand_id: user.id,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n    const {\n      data,\n      error\n    } = await supabase.from('leads').insert([leadWithBrand]).select().single();\n    if (error) {\n      throw new Error(`Failed to insert lead: ${error.message}`);\n    }\n    return data;\n  },\n  // Update a lead (RLS will ensure user can only update their own leads)\n  async updateLead(leadId, updates) {\n    const updateData = {\n      ...updates,\n      updated_at: new Date().toISOString()\n    };\n    const {\n      data,\n      error\n    } = await supabase.from('leads').update(updateData).eq('id', leadId).select().single();\n    if (error) {\n      throw new Error(`Failed to update lead: ${error.message}`);\n    }\n    return data;\n  },\n  // Delete a lead (RLS will ensure user can only delete their own leads)\n  async deleteLead(leadId) {\n    const {\n      error\n    } = await supabase.from('leads').delete().eq('id', leadId);\n    if (error) {\n      throw new Error(`Failed to delete lead: ${error.message}`);\n    }\n    return true;\n  },\n  // Update lead stage\n  async updateLeadStage(leadId, newStage) {\n    return this.updateLead(leadId, {\n      stage: newStage\n    });\n  },\n  // Add message to lead conversation\n  async addMessage(leadId, message) {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      throw new Error('User not authenticated');\n    }\n    const messageData = {\n      lead_id: leadId,\n      content: message.content,\n      html_content: message.htmlContent,\n      sender: 'us',\n      sent_at: new Date().toISOString(),\n      brand_id: user.id\n    };\n    const {\n      data,\n      error\n    } = await supabase.from('messages').insert([messageData]).select().single();\n    if (error) {\n      throw new Error(`Failed to add message: ${error.message}`);\n    }\n    return data;\n  },\n  // Fetch messages for a lead\n  async fetchMessages(leadId) {\n    const {\n      data,\n      error\n    } = await supabase.from('messages').select('*').eq('lead_id', leadId).order('sent_at', {\n      ascending: true\n    });\n    if (error) {\n      throw new Error(`Failed to fetch messages: ${error.message}`);\n    }\n    return data || [];\n  }\n};","map":{"version":3,"names":["supabase","leadsService","fetchLeads","data","error","from","select","order","ascending","Error","message","insertLead","leadData","user","auth","getUser","leadWithBrand","brand_id","id","created_at","Date","toISOString","updated_at","insert","single","updateLead","leadId","updates","updateData","update","eq","deleteLead","delete","updateLeadStage","newStage","stage","addMessage","messageData","lead_id","content","html_content","htmlContent","sender","sent_at","fetchMessages"],"sources":["/Users/reidsickels/Inbox/inbox-manager-frontend/src/lib/leadsService.js"],"sourcesContent":["import { supabase } from './supabase';\n\n// Lead service functions that work with Supabase and RLS\nexport const leadsService = {\n  // Fetch leads for the current user (RLS will filter by brand_id)\n  async fetchLeads() {\n    const { data, error } = await supabase\n      .from('leads')\n      .select('*')\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      throw new Error(`Failed to fetch leads: ${error.message}`);\n    }\n\n    return data || [];\n  },\n\n  // Insert a new lead with brand_id set to current user's ID\n  async insertLead(leadData) {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('User not authenticated');\n    }\n\n    const leadWithBrand = {\n      ...leadData,\n      brand_id: user.id,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n\n    const { data, error } = await supabase\n      .from('leads')\n      .insert([leadWithBrand])\n      .select()\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to insert lead: ${error.message}`);\n    }\n\n    return data;\n  },\n\n  // Update a lead (RLS will ensure user can only update their own leads)\n  async updateLead(leadId, updates) {\n    const updateData = {\n      ...updates,\n      updated_at: new Date().toISOString()\n    };\n\n    const { data, error } = await supabase\n      .from('leads')\n      .update(updateData)\n      .eq('id', leadId)\n      .select()\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to update lead: ${error.message}`);\n    }\n\n    return data;\n  },\n\n  // Delete a lead (RLS will ensure user can only delete their own leads)\n  async deleteLead(leadId) {\n    const { error } = await supabase\n      .from('leads')\n      .delete()\n      .eq('id', leadId);\n\n    if (error) {\n      throw new Error(`Failed to delete lead: ${error.message}`);\n    }\n\n    return true;\n  },\n\n  // Update lead stage\n  async updateLeadStage(leadId, newStage) {\n    return this.updateLead(leadId, { stage: newStage });\n  },\n\n  // Add message to lead conversation\n  async addMessage(leadId, message) {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('User not authenticated');\n    }\n\n    const messageData = {\n      lead_id: leadId,\n      content: message.content,\n      html_content: message.htmlContent,\n      sender: 'us',\n      sent_at: new Date().toISOString(),\n      brand_id: user.id\n    };\n\n    const { data, error } = await supabase\n      .from('messages')\n      .insert([messageData])\n      .select()\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to add message: ${error.message}`);\n    }\n\n    return data;\n  },\n\n  // Fetch messages for a lead\n  async fetchMessages(leadId) {\n    const { data, error } = await supabase\n      .from('messages')\n      .select('*')\n      .eq('lead_id', leadId)\n      .order('sent_at', { ascending: true });\n\n    if (error) {\n      throw new Error(`Failed to fetch messages: ${error.message}`);\n    }\n\n    return data || [];\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}